Nonterminals useless in grammar

   vardecl
   expr
   binop
   unop


Terminals unused in grammar

   ROOT
   IDENT
   NUMBER
   TOK_GE
   TOK_LE
   TOK_EQ
   TOK_NE
   TOK_GT
   TOK_LT
   TOK_IF
   TOK_ELSE
   TOK_STRUCT
   TOK_ARRAY
   TOK_NOT
   TOK_ALLOC
   TOK_PTR
   TOK_ARROW
   TOK_WHILE
   TOK_VOID
   TOK_RETURN
   TOK_INT
   TOK_CHAR
   TOK_STRING
   TOK_CHARCON
   TOK_STRINGCON
   TOK_INTCON
   TOK_IDENT
   '='
   '+'
   '-'
   '*'
   '/'
   '%'
   '^'
   '('
   ')'


Rules useless in grammar

    5 stmtseq: stmtseq expr ';'

    6 vardecl: TOK_IDENT '=' expr

    7 expr: '(' expr ')'
    8     | binop
    9     | unop

   10 binop: expr '=' expr
   11      | expr '+' expr
   12      | expr '-' expr
   13      | expr '*' expr
   14      | expr '/' expr
   15      | expr '^' expr
   16      | expr '%' expr
   17      | expr TOK_EQ expr
   18      | expr TOK_NE expr
   19      | expr TOK_LT expr
   20      | expr TOK_LE expr
   21      | expr TOK_GT expr
   22      | expr TOK_GE expr

   23 unop: '+' expr
   24     | '-' expr
   25     | TOK_NOT expr


Grammar

    0 $accept: program $end

    1 program: stmtseq

    2 stmtseq: stmtseq error ';'
    3        | stmtseq ';'
    4        | %empty


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'(' (40)
')' (41)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
';' (59) 2 3
'=' (61)
'^' (94)
error (256) 2
ROOT (258)
IDENT (259)
NUMBER (260)
TOK_GE (261)
TOK_LE (262)
TOK_EQ (263)
TOK_NE (264)
TOK_GT (265)
TOK_LT (266)
TOK_IF (267)
TOK_ELSE (268)
TOK_STRUCT (269)
TOK_ARRAY (270)
TOK_NOT (271)
TOK_ALLOC (272)
TOK_PTR (273)
TOK_ARROW (274)
TOK_WHILE (275)
TOK_VOID (276)
TOK_RETURN (277)
TOK_INT (278)
TOK_CHAR (279)
TOK_STRING (280)
TOK_CHARCON (281)
TOK_STRINGCON (282)
TOK_INTCON (283)
TOK_IDENT (284)
POS (285)
NEG (286)


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1, on right: 0
stmtseq (44)
    on left: 2 3 4, on right: 1 2 3


State 0

    0 $accept: . program $end

    $default  reduce using rule 4 (stmtseq)

    program  go to state 1
    stmtseq  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: stmtseq .
    2 stmtseq: stmtseq . error ';'
    3        | stmtseq . ';'

    error  shift, and go to state 4
    ';'    shift, and go to state 5

    $end  reduce using rule 1 (program)


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 stmtseq: stmtseq error . ';'

    ';'  shift, and go to state 6


State 5

    3 stmtseq: stmtseq ';' .

    $default  reduce using rule 3 (stmtseq)


State 6

    2 stmtseq: stmtseq error ';' .

    $default  reduce using rule 2 (stmtseq)
