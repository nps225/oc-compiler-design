Terminals unused in grammar

   ROOT
   IDENT
   NUMBER
   TYPE_ID
   FUNCTION
   TOK_PARAM
   TOK_PROTOTYPE
   BLOCK
   TOK_INDEX
   CALL
   ENDIF
   '^'


State 27 conflicts: 23 shift/reduce
State 52 conflicts: 22 shift/reduce
State 69 conflicts: 1 shift/reduce
State 73 conflicts: 10 reduce/reduce
State 76 conflicts: 10 reduce/reduce
State 83 conflicts: 2 shift/reduce
State 89 conflicts: 2 shift/reduce
State 90 conflicts: 2 shift/reduce
State 127 conflicts: 14 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program struct
    3        | program vardecl
    4        | program function
    5        | program error ';'
    6        | program ';'
    7        | %empty

    8 struct: TOK_STRUCT TOK_IDENT '{' '}' ';'
    9       | TOK_STRUCT TOK_IDENT block

   10 function: identif '(' ')' ';'
   11         | identif param ')' ';'
   12         | identif '(' ')' block
   13         | identif param ')' block

   14 vardecl: type TOK_IDENT ';'
   15        | type TOK_IDENT '=' express ';'

   16 identif: type TOK_IDENT

   17 param: '(' identif
   18      | param ',' identif

   19 callParam: TOK_IDENT '(' express
   20          | callParam ',' express

   21 call: TOK_IDENT '(' ')'
   22     | callParam ')'

   23 while: TOK_WHILE '(' express ')' select

   24 select: state

   25 ifelse: TOK_IF '(' express ')' select
   26       | TOK_ELSE select

   27 return: TOK_RETURN ';'
   28       | TOK_RETURN express ';'

   29 alloc: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' ')'
   30      | TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' express ')'
   31      | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' express ')'
   32      | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   33      | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' ')'
   34      | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' express ')'

   35 block: blockBody '}'
   36      | blockBody '}' ';'
   37      | ';'

   38 blockBody: '{' state
   39          | blockBody state
   40          | '{'

   41 state: vardecl
   42      | block
   43      | while
   44      | ifelse
   45      | return
   46      | express ';'

   47 express: express binop express
   48        | unop
   49        | alloc
   50        | call
   51        | '(' express ')'
   52        | var
   53        | constant

   54 binop: '='
   55      | TOK_EQ
   56      | TOK_NE
   57      | TOK_GT
   58      | TOK_GE
   59      | TOK_LT
   60      | TOK_LE
   61      | '+'
   62      | '-'
   63      | '*'
   64      | '/'
   65      | '%'

   66 unop: '+' express
   67     | '-' express
   68     | TOK_NOT express

   69 var: TOK_IDENT
   70    | express '[' express ']'
   71    | express TOK_ARROW TOK_IDENT

   72 type: type_id
   73     | TOK_ARRAY TOK_LT type_id TOK_GT

   74 type_id: TOK_INT
   75        | TOK_STRING
   76        | TOK_CHAR
   77        | TOK_VOID
   78        | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

   79 constant: TOK_INTCON
   80         | TOK_STRINGCON
   81         | TOK_CHARCON
   82         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'%' (37) 65
'(' (40) 10 12 17 19 21 23 25 29 30 31 32 33 34 51
')' (41) 10 11 12 13 21 22 23 25 29 30 31 32 33 34 51
'*' (42) 63
'+' (43) 61 66
',' (44) 18 20
'-' (45) 62 67
'/' (47) 64
';' (59) 5 6 8 10 11 14 15 27 28 36 37 46
'=' (61) 15 54
'[' (91) 70
']' (93) 70
'^' (94)
'{' (123) 8 38 40
'}' (125) 8 35 36
error (256) 5
ROOT (258)
IDENT (259)
NUMBER (260)
TYPE_ID (261)
FUNCTION (262)
TOK_PARAM (263)
TOK_PROTOTYPE (264)
BLOCK (265)
TOK_NULLPTR (266) 82
TOK_INDEX (267)
CALL (268)
ENDIF (269)
TOK_GE (270) 58
TOK_LE (271) 60
TOK_EQ (272) 55
TOK_NE (273) 56
TOK_GT (274) 29 30 31 32 33 34 57 73 78
TOK_LT (275) 29 30 31 32 33 34 59 73 78
TOK_IF (276) 25
TOK_ELSE (277) 26
TOK_STRUCT (278) 8 9 31 32 78
TOK_ARRAY (279) 33 34 73
TOK_NOT (280) 68
TOK_ALLOC (281) 29 30 31 32 33 34
TOK_PTR (282) 78
TOK_ARROW (283) 71
TOK_WHILE (284) 23
TOK_VOID (285) 77
TOK_RETURN (286) 27 28
TOK_INT (287) 74
TOK_CHAR (288) 76
TOK_STRING (289) 29 30 75
TOK_CHARCON (290) 81
TOK_STRINGCON (291) 80
TOK_INTCON (292) 79
TOK_IDENT (293) 8 9 14 15 16 19 21 31 32 69 71 78
POS (294)
NEG (295)


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
start (57)
    on left: 1, on right: 0
program (58)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
struct (59)
    on left: 8 9, on right: 2
function (60)
    on left: 10 11 12 13, on right: 4
vardecl (61)
    on left: 14 15, on right: 3 41
identif (62)
    on left: 16, on right: 10 11 12 13 17 18
param (63)
    on left: 17 18, on right: 11 13 18
callParam (64)
    on left: 19 20, on right: 20 22
call (65)
    on left: 21 22, on right: 50
while (66)
    on left: 23, on right: 43
select (67)
    on left: 24, on right: 23 25 26
ifelse (68)
    on left: 25 26, on right: 44
return (69)
    on left: 27 28, on right: 45
alloc (70)
    on left: 29 30 31 32 33 34, on right: 49
block (71)
    on left: 35 36 37, on right: 9 12 13 42
blockBody (72)
    on left: 38 39 40, on right: 35 36 39
state (73)
    on left: 41 42 43 44 45 46, on right: 24 38 39
express (74)
    on left: 47 48 49 50 51 52 53, on right: 15 19 20 23 25 28 30 31
    34 46 47 51 66 67 68 70 71
binop (75)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65, on right: 47
unop (76)
    on left: 66 67 68, on right: 48
var (77)
    on left: 69 70 71, on right: 52
type (78)
    on left: 72 73, on right: 14 15 16 33 34
type_id (79)
    on left: 74 75 76 77 78, on right: 72 73
constant (80)
    on left: 79 80 81 82, on right: 53


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . struct
    3        | program . vardecl
    4        | program . function
    5        | program . error ';'
    6        | program . ';'

    error       shift, and go to state 4
    TOK_STRUCT  shift, and go to state 5
    TOK_ARRAY   shift, and go to state 6
    TOK_PTR     shift, and go to state 7
    TOK_VOID    shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    ';'         shift, and go to state 12

    $end  reduce using rule 1 (start)

    struct    go to state 13
    function  go to state 14
    vardecl   go to state 15
    identif   go to state 16
    type      go to state 17
    type_id   go to state 18


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . ';'

    ';'  shift, and go to state 19


State 5

    8 struct: TOK_STRUCT . TOK_IDENT '{' '}' ';'
    9       | TOK_STRUCT . TOK_IDENT block

    TOK_IDENT  shift, and go to state 20


State 6

   73 type: TOK_ARRAY . TOK_LT type_id TOK_GT

    TOK_LT  shift, and go to state 21


State 7

   78 type_id: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 22


State 8

   77 type_id: TOK_VOID .

    $default  reduce using rule 77 (type_id)


State 9

   74 type_id: TOK_INT .

    $default  reduce using rule 74 (type_id)


State 10

   76 type_id: TOK_CHAR .

    $default  reduce using rule 76 (type_id)


State 11

   75 type_id: TOK_STRING .

    $default  reduce using rule 75 (type_id)


State 12

    6 program: program ';' .

    $default  reduce using rule 6 (program)


State 13

    2 program: program struct .

    $default  reduce using rule 2 (program)


State 14

    4 program: program function .

    $default  reduce using rule 4 (program)


State 15

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 16

   10 function: identif . '(' ')' ';'
   11         | identif . param ')' ';'
   12         | identif . '(' ')' block
   13         | identif . param ')' block

    '('  shift, and go to state 23

    param  go to state 24


State 17

   14 vardecl: type . TOK_IDENT ';'
   15        | type . TOK_IDENT '=' express ';'
   16 identif: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 25


State 18

   72 type: type_id .

    $default  reduce using rule 72 (type)


State 19

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 20

    8 struct: TOK_STRUCT TOK_IDENT . '{' '}' ';'
    9       | TOK_STRUCT TOK_IDENT . block

    ';'  shift, and go to state 26
    '{'  shift, and go to state 27

    block      go to state 28
    blockBody  go to state 29


State 21

   73 type: TOK_ARRAY TOK_LT . type_id TOK_GT

    TOK_PTR     shift, and go to state 7
    TOK_VOID    shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_STRING  shift, and go to state 11

    type_id  go to state 30


State 22

   78 type_id: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 31


State 23

   10 function: identif '(' . ')' ';'
   12         | identif '(' . ')' block
   17 param: '(' . identif

    TOK_ARRAY   shift, and go to state 6
    TOK_PTR     shift, and go to state 7
    TOK_VOID    shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_STRING  shift, and go to state 11
    ')'         shift, and go to state 32

    identif  go to state 33
    type     go to state 34
    type_id  go to state 18


State 24

   11 function: identif param . ')' ';'
   13         | identif param . ')' block
   18 param: param . ',' identif

    ')'  shift, and go to state 35
    ','  shift, and go to state 36


State 25

   14 vardecl: type TOK_IDENT . ';'
   15        | type TOK_IDENT . '=' express ';'
   16 identif: type TOK_IDENT .

    '='  shift, and go to state 37
    ';'  shift, and go to state 38

    $default  reduce using rule 16 (identif)


State 26

   37 block: ';' .

    $default  reduce using rule 37 (block)


State 27

    8 struct: TOK_STRUCT TOK_IDENT '{' . '}' ';'
   38 blockBody: '{' . state
   40          | '{' .

    TOK_NULLPTR    shift, and go to state 39
    TOK_IF         shift, and go to state 40
    TOK_ELSE       shift, and go to state 41
    TOK_ARRAY      shift, and go to state 6
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 7
    TOK_WHILE      shift, and go to state 44
    TOK_VOID       shift, and go to state 8
    TOK_RETURN     shift, and go to state 45
    TOK_INT        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_STRING     shift, and go to state 11
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    ';'            shift, and go to state 26
    '{'            shift, and go to state 52
    '}'            shift, and go to state 53
    '('            shift, and go to state 54

    TOK_NULLPTR    [reduce using rule 40 (blockBody)]
    TOK_IF         [reduce using rule 40 (blockBody)]
    TOK_ELSE       [reduce using rule 40 (blockBody)]
    TOK_ARRAY      [reduce using rule 40 (blockBody)]
    TOK_NOT        [reduce using rule 40 (blockBody)]
    TOK_ALLOC      [reduce using rule 40 (blockBody)]
    TOK_PTR        [reduce using rule 40 (blockBody)]
    TOK_WHILE      [reduce using rule 40 (blockBody)]
    TOK_VOID       [reduce using rule 40 (blockBody)]
    TOK_RETURN     [reduce using rule 40 (blockBody)]
    TOK_INT        [reduce using rule 40 (blockBody)]
    TOK_CHAR       [reduce using rule 40 (blockBody)]
    TOK_STRING     [reduce using rule 40 (blockBody)]
    TOK_CHARCON    [reduce using rule 40 (blockBody)]
    TOK_STRINGCON  [reduce using rule 40 (blockBody)]
    TOK_INTCON     [reduce using rule 40 (blockBody)]
    TOK_IDENT      [reduce using rule 40 (blockBody)]
    '+'            [reduce using rule 40 (blockBody)]
    '-'            [reduce using rule 40 (blockBody)]
    ';'            [reduce using rule 40 (blockBody)]
    '{'            [reduce using rule 40 (blockBody)]
    '}'            [reduce using rule 40 (blockBody)]
    '('            [reduce using rule 40 (blockBody)]

    vardecl    go to state 55
    callParam  go to state 56
    call       go to state 57
    while      go to state 58
    ifelse     go to state 59
    return     go to state 60
    alloc      go to state 61
    block      go to state 62
    blockBody  go to state 29
    state      go to state 63
    express    go to state 64
    unop       go to state 65
    var        go to state 66
    type       go to state 67
    type_id    go to state 18
    constant   go to state 68


State 28

    9 struct: TOK_STRUCT TOK_IDENT block .

    $default  reduce using rule 9 (struct)


State 29

   35 block: blockBody . '}'
   36      | blockBody . '}' ';'
   39 blockBody: blockBody . state

    TOK_NULLPTR    shift, and go to state 39
    TOK_IF         shift, and go to state 40
    TOK_ELSE       shift, and go to state 41
    TOK_ARRAY      shift, and go to state 6
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 7
    TOK_WHILE      shift, and go to state 44
    TOK_VOID       shift, and go to state 8
    TOK_RETURN     shift, and go to state 45
    TOK_INT        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_STRING     shift, and go to state 11
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    ';'            shift, and go to state 26
    '{'            shift, and go to state 52
    '}'            shift, and go to state 69
    '('            shift, and go to state 54

    vardecl    go to state 55
    callParam  go to state 56
    call       go to state 57
    while      go to state 58
    ifelse     go to state 59
    return     go to state 60
    alloc      go to state 61
    block      go to state 62
    blockBody  go to state 29
    state      go to state 70
    express    go to state 64
    unop       go to state 65
    var        go to state 66
    type       go to state 67
    type_id    go to state 18
    constant   go to state 68


State 30

   73 type: TOK_ARRAY TOK_LT type_id . TOK_GT

    TOK_GT  shift, and go to state 71


State 31

   78 type_id: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 72


State 32

   10 function: identif '(' ')' . ';'
   12         | identif '(' ')' . block

    ';'  shift, and go to state 73
    '{'  shift, and go to state 52

    block      go to state 74
    blockBody  go to state 29


State 33

   17 param: '(' identif .

    $default  reduce using rule 17 (param)


State 34

   16 identif: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 75


State 35

   11 function: identif param ')' . ';'
   13         | identif param ')' . block

    ';'  shift, and go to state 76
    '{'  shift, and go to state 52

    block      go to state 77
    blockBody  go to state 29


State 36

   18 param: param ',' . identif

    TOK_ARRAY   shift, and go to state 6
    TOK_PTR     shift, and go to state 7
    TOK_VOID    shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_STRING  shift, and go to state 11

    identif  go to state 78
    type     go to state 34
    type_id  go to state 18


State 37

   15 vardecl: type TOK_IDENT '=' . express ';'

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 79
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 38

   14 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 14 (vardecl)


State 39

   82 constant: TOK_NULLPTR .

    $default  reduce using rule 82 (constant)


State 40

   25 ifelse: TOK_IF . '(' express ')' select

    '('  shift, and go to state 80


State 41

   26 ifelse: TOK_ELSE . select

    TOK_NULLPTR    shift, and go to state 39
    TOK_IF         shift, and go to state 40
    TOK_ELSE       shift, and go to state 41
    TOK_ARRAY      shift, and go to state 6
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 7
    TOK_WHILE      shift, and go to state 44
    TOK_VOID       shift, and go to state 8
    TOK_RETURN     shift, and go to state 45
    TOK_INT        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_STRING     shift, and go to state 11
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    ';'            shift, and go to state 26
    '{'            shift, and go to state 52
    '('            shift, and go to state 54

    vardecl    go to state 55
    callParam  go to state 56
    call       go to state 57
    while      go to state 58
    select     go to state 81
    ifelse     go to state 59
    return     go to state 60
    alloc      go to state 61
    block      go to state 62
    blockBody  go to state 29
    state      go to state 82
    express    go to state 64
    unop       go to state 65
    var        go to state 66
    type       go to state 67
    type_id    go to state 18
    constant   go to state 68


State 42

   68 unop: TOK_NOT . express

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 83
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 43

   29 alloc: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' ')'
   30      | TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' express ')'
   31      | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' express ')'
   32      | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   33      | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' ')'
   34      | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' express ')'

    TOK_LT  shift, and go to state 84


State 44

   23 while: TOK_WHILE . '(' express ')' select

    '('  shift, and go to state 85


State 45

   27 return: TOK_RETURN . ';'
   28       | TOK_RETURN . express ';'

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    ';'            shift, and go to state 86
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 87
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 46

   81 constant: TOK_CHARCON .

    $default  reduce using rule 81 (constant)


State 47

   80 constant: TOK_STRINGCON .

    $default  reduce using rule 80 (constant)


State 48

   79 constant: TOK_INTCON .

    $default  reduce using rule 79 (constant)


State 49

   19 callParam: TOK_IDENT . '(' express
   21 call: TOK_IDENT . '(' ')'
   69 var: TOK_IDENT .

    '('  shift, and go to state 88

    $default  reduce using rule 69 (var)


State 50

   66 unop: '+' . express

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 89
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 51

   67 unop: '-' . express

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 90
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 52

   38 blockBody: '{' . state
   40          | '{' .

    TOK_NULLPTR    shift, and go to state 39
    TOK_IF         shift, and go to state 40
    TOK_ELSE       shift, and go to state 41
    TOK_ARRAY      shift, and go to state 6
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 7
    TOK_WHILE      shift, and go to state 44
    TOK_VOID       shift, and go to state 8
    TOK_RETURN     shift, and go to state 45
    TOK_INT        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_STRING     shift, and go to state 11
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    ';'            shift, and go to state 26
    '{'            shift, and go to state 52
    '('            shift, and go to state 54

    TOK_NULLPTR    [reduce using rule 40 (blockBody)]
    TOK_IF         [reduce using rule 40 (blockBody)]
    TOK_ELSE       [reduce using rule 40 (blockBody)]
    TOK_ARRAY      [reduce using rule 40 (blockBody)]
    TOK_NOT        [reduce using rule 40 (blockBody)]
    TOK_ALLOC      [reduce using rule 40 (blockBody)]
    TOK_PTR        [reduce using rule 40 (blockBody)]
    TOK_WHILE      [reduce using rule 40 (blockBody)]
    TOK_VOID       [reduce using rule 40 (blockBody)]
    TOK_RETURN     [reduce using rule 40 (blockBody)]
    TOK_INT        [reduce using rule 40 (blockBody)]
    TOK_CHAR       [reduce using rule 40 (blockBody)]
    TOK_STRING     [reduce using rule 40 (blockBody)]
    TOK_CHARCON    [reduce using rule 40 (blockBody)]
    TOK_STRINGCON  [reduce using rule 40 (blockBody)]
    TOK_INTCON     [reduce using rule 40 (blockBody)]
    TOK_IDENT      [reduce using rule 40 (blockBody)]
    '+'            [reduce using rule 40 (blockBody)]
    '-'            [reduce using rule 40 (blockBody)]
    ';'            [reduce using rule 40 (blockBody)]
    '{'            [reduce using rule 40 (blockBody)]
    '('            [reduce using rule 40 (blockBody)]
    $default       reduce using rule 40 (blockBody)

    vardecl    go to state 55
    callParam  go to state 56
    call       go to state 57
    while      go to state 58
    ifelse     go to state 59
    return     go to state 60
    alloc      go to state 61
    block      go to state 62
    blockBody  go to state 29
    state      go to state 63
    express    go to state 64
    unop       go to state 65
    var        go to state 66
    type       go to state 67
    type_id    go to state 18
    constant   go to state 68


State 53

    8 struct: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 91


State 54

   51 express: '(' . express ')'

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 92
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 55

   41 state: vardecl .

    $default  reduce using rule 41 (state)


State 56

   20 callParam: callParam . ',' express
   22 call: callParam . ')'

    ')'  shift, and go to state 93
    ','  shift, and go to state 94


State 57

   50 express: call .

    $default  reduce using rule 50 (express)


State 58

   43 state: while .

    $default  reduce using rule 43 (state)


State 59

   44 state: ifelse .

    $default  reduce using rule 44 (state)


State 60

   45 state: return .

    $default  reduce using rule 45 (state)


State 61

   49 express: alloc .

    $default  reduce using rule 49 (express)


State 62

   42 state: block .

    $default  reduce using rule 42 (state)


State 63

   38 blockBody: '{' state .

    $default  reduce using rule 38 (blockBody)


State 64

   46 state: express . ';'
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ';'        shift, and go to state 108
    '['        shift, and go to state 109

    binop  go to state 110


State 65

   48 express: unop .

    $default  reduce using rule 48 (express)


State 66

   52 express: var .

    $default  reduce using rule 52 (express)


State 67

   14 vardecl: type . TOK_IDENT ';'
   15        | type . TOK_IDENT '=' express ';'

    TOK_IDENT  shift, and go to state 111


State 68

   53 express: constant .

    $default  reduce using rule 53 (express)


State 69

   35 block: blockBody '}' .
   36      | blockBody '}' . ';'

    ';'  shift, and go to state 112

    ';'       [reduce using rule 35 (block)]
    $default  reduce using rule 35 (block)


State 70

   39 blockBody: blockBody state .

    $default  reduce using rule 39 (blockBody)


State 71

   73 type: TOK_ARRAY TOK_LT type_id TOK_GT .

    $default  reduce using rule 73 (type)


State 72

   78 type_id: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 113


State 73

   10 function: identif '(' ')' ';' .
   37 block: ';' .

    $end        reduce using rule 10 (function)
    $end        [reduce using rule 37 (block)]
    error       reduce using rule 10 (function)
    error       [reduce using rule 37 (block)]
    TOK_STRUCT  reduce using rule 10 (function)
    TOK_STRUCT  [reduce using rule 37 (block)]
    TOK_ARRAY   reduce using rule 10 (function)
    TOK_ARRAY   [reduce using rule 37 (block)]
    TOK_PTR     reduce using rule 10 (function)
    TOK_PTR     [reduce using rule 37 (block)]
    TOK_VOID    reduce using rule 10 (function)
    TOK_VOID    [reduce using rule 37 (block)]
    TOK_INT     reduce using rule 10 (function)
    TOK_INT     [reduce using rule 37 (block)]
    TOK_CHAR    reduce using rule 10 (function)
    TOK_CHAR    [reduce using rule 37 (block)]
    TOK_STRING  reduce using rule 10 (function)
    TOK_STRING  [reduce using rule 37 (block)]
    ';'         reduce using rule 10 (function)
    ';'         [reduce using rule 37 (block)]
    $default    reduce using rule 10 (function)


State 74

   12 function: identif '(' ')' block .

    $default  reduce using rule 12 (function)


State 75

   16 identif: type TOK_IDENT .

    $default  reduce using rule 16 (identif)


State 76

   11 function: identif param ')' ';' .
   37 block: ';' .

    $end        reduce using rule 11 (function)
    $end        [reduce using rule 37 (block)]
    error       reduce using rule 11 (function)
    error       [reduce using rule 37 (block)]
    TOK_STRUCT  reduce using rule 11 (function)
    TOK_STRUCT  [reduce using rule 37 (block)]
    TOK_ARRAY   reduce using rule 11 (function)
    TOK_ARRAY   [reduce using rule 37 (block)]
    TOK_PTR     reduce using rule 11 (function)
    TOK_PTR     [reduce using rule 37 (block)]
    TOK_VOID    reduce using rule 11 (function)
    TOK_VOID    [reduce using rule 37 (block)]
    TOK_INT     reduce using rule 11 (function)
    TOK_INT     [reduce using rule 37 (block)]
    TOK_CHAR    reduce using rule 11 (function)
    TOK_CHAR    [reduce using rule 37 (block)]
    TOK_STRING  reduce using rule 11 (function)
    TOK_STRING  [reduce using rule 37 (block)]
    ';'         reduce using rule 11 (function)
    ';'         [reduce using rule 37 (block)]
    $default    reduce using rule 11 (function)


State 77

   13 function: identif param ')' block .

    $default  reduce using rule 13 (function)


State 78

   18 param: param ',' identif .

    $default  reduce using rule 18 (param)


State 79

   15 vardecl: type TOK_IDENT '=' express . ';'
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ';'        shift, and go to state 114
    '['        shift, and go to state 109

    binop  go to state 110


State 80

   25 ifelse: TOK_IF '(' . express ')' select

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 115
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 81

   26 ifelse: TOK_ELSE select .

    $default  reduce using rule 26 (ifelse)


State 82

   24 select: state .

    $default  reduce using rule 24 (select)


State 83

   47 express: express . binop express
   68 unop: TOK_NOT express .
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 101
    '['        shift, and go to state 109

    TOK_ARROW  [reduce using rule 68 (unop)]
    '['        [reduce using rule 68 (unop)]
    $default   reduce using rule 68 (unop)

    binop  go to state 110


State 84

   29 alloc: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' ')'
   30      | TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' express ')'
   31      | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' express ')'
   32      | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   33      | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' ')'
   34      | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' express ')'

    TOK_STRUCT  shift, and go to state 116
    TOK_ARRAY   shift, and go to state 117
    TOK_STRING  shift, and go to state 118


State 85

   23 while: TOK_WHILE '(' . express ')' select

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 119
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 86

   27 return: TOK_RETURN ';' .

    $default  reduce using rule 27 (return)


State 87

   28 return: TOK_RETURN express . ';'
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ';'        shift, and go to state 120
    '['        shift, and go to state 109

    binop  go to state 110


State 88

   19 callParam: TOK_IDENT '(' . express
   21 call: TOK_IDENT '(' . ')'

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54
    ')'            shift, and go to state 121

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 122
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 89

   47 express: express . binop express
   66 unop: '+' express .
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 101
    '['        shift, and go to state 109

    TOK_ARROW  [reduce using rule 66 (unop)]
    '['        [reduce using rule 66 (unop)]
    $default   reduce using rule 66 (unop)

    binop  go to state 110


State 90

   47 express: express . binop express
   67 unop: '-' express .
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 101
    '['        shift, and go to state 109

    TOK_ARROW  [reduce using rule 67 (unop)]
    '['        [reduce using rule 67 (unop)]
    $default   reduce using rule 67 (unop)

    binop  go to state 110


State 91

    8 struct: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (struct)


State 92

   47 express: express . binop express
   51        | '(' express . ')'
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ')'        shift, and go to state 123
    '['        shift, and go to state 109

    binop  go to state 110


State 93

   22 call: callParam ')' .

    $default  reduce using rule 22 (call)


State 94

   20 callParam: callParam ',' . express

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 124
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 95

   58 binop: TOK_GE .

    $default  reduce using rule 58 (binop)


State 96

   60 binop: TOK_LE .

    $default  reduce using rule 60 (binop)


State 97

   55 binop: TOK_EQ .

    $default  reduce using rule 55 (binop)


State 98

   56 binop: TOK_NE .

    $default  reduce using rule 56 (binop)


State 99

   57 binop: TOK_GT .

    $default  reduce using rule 57 (binop)


State 100

   59 binop: TOK_LT .

    $default  reduce using rule 59 (binop)


State 101

   71 var: express TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 125


State 102

   54 binop: '=' .

    $default  reduce using rule 54 (binop)


State 103

   61 binop: '+' .

    $default  reduce using rule 61 (binop)


State 104

   62 binop: '-' .

    $default  reduce using rule 62 (binop)


State 105

   63 binop: '*' .

    $default  reduce using rule 63 (binop)


State 106

   64 binop: '/' .

    $default  reduce using rule 64 (binop)


State 107

   65 binop: '%' .

    $default  reduce using rule 65 (binop)


State 108

   46 state: express ';' .

    $default  reduce using rule 46 (state)


State 109

   70 var: express '[' . express ']'

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 126
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 110

   47 express: express binop . express

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 127
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 111

   14 vardecl: type TOK_IDENT . ';'
   15        | type TOK_IDENT . '=' express ';'

    '='  shift, and go to state 37
    ';'  shift, and go to state 38


State 112

   36 block: blockBody '}' ';' .

    $default  reduce using rule 36 (block)


State 113

   78 type_id: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 78 (type_id)


State 114

   15 vardecl: type TOK_IDENT '=' express ';' .

    $default  reduce using rule 15 (vardecl)


State 115

   25 ifelse: TOK_IF '(' express . ')' select
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ')'        shift, and go to state 128
    '['        shift, and go to state 109

    binop  go to state 110


State 116

   31 alloc: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' express ')'
   32      | TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 129


State 117

   33 alloc: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT type TOK_GT TOK_GT '(' ')'
   34      | TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT type TOK_GT TOK_GT '(' express ')'

    TOK_LT  shift, and go to state 130


State 118

   29 alloc: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' ')'
   30      | TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' express ')'

    TOK_GT  shift, and go to state 131


State 119

   23 while: TOK_WHILE '(' express . ')' select
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ')'        shift, and go to state 132
    '['        shift, and go to state 109

    binop  go to state 110


State 120

   28 return: TOK_RETURN express ';' .

    $default  reduce using rule 28 (return)


State 121

   21 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 21 (call)


State 122

   19 callParam: TOK_IDENT '(' express .
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    '['        shift, and go to state 109

    $default  reduce using rule 19 (callParam)

    binop  go to state 110


State 123

   51 express: '(' express ')' .

    $default  reduce using rule 51 (express)


State 124

   20 callParam: callParam ',' express .
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    '['        shift, and go to state 109

    $default  reduce using rule 20 (callParam)

    binop  go to state 110


State 125

   71 var: express TOK_ARROW TOK_IDENT .

    $default  reduce using rule 71 (var)


State 126

   47 express: express . binop express
   70 var: express . '[' express ']'
   70    | express '[' express . ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    '['        shift, and go to state 109
    ']'        shift, and go to state 133

    binop  go to state 110


State 127

   47 express: express . binop express
   47        | express binop express .
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    '['        shift, and go to state 109

    TOK_GE     [reduce using rule 47 (express)]
    TOK_LE     [reduce using rule 47 (express)]
    TOK_EQ     [reduce using rule 47 (express)]
    TOK_NE     [reduce using rule 47 (express)]
    TOK_GT     [reduce using rule 47 (express)]
    TOK_LT     [reduce using rule 47 (express)]
    TOK_ARROW  [reduce using rule 47 (express)]
    '='        [reduce using rule 47 (express)]
    '+'        [reduce using rule 47 (express)]
    '-'        [reduce using rule 47 (express)]
    '*'        [reduce using rule 47 (express)]
    '/'        [reduce using rule 47 (express)]
    '%'        [reduce using rule 47 (express)]
    '['        [reduce using rule 47 (express)]
    $default   reduce using rule 47 (express)

    binop  go to state 110


State 128

   25 ifelse: TOK_IF '(' express ')' . select

    TOK_NULLPTR    shift, and go to state 39
    TOK_IF         shift, and go to state 40
    TOK_ELSE       shift, and go to state 41
    TOK_ARRAY      shift, and go to state 6
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 7
    TOK_WHILE      shift, and go to state 44
    TOK_VOID       shift, and go to state 8
    TOK_RETURN     shift, and go to state 45
    TOK_INT        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_STRING     shift, and go to state 11
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    ';'            shift, and go to state 26
    '{'            shift, and go to state 52
    '('            shift, and go to state 54

    vardecl    go to state 55
    callParam  go to state 56
    call       go to state 57
    while      go to state 58
    select     go to state 134
    ifelse     go to state 59
    return     go to state 60
    alloc      go to state 61
    block      go to state 62
    blockBody  go to state 29
    state      go to state 82
    express    go to state 64
    unop       go to state 65
    var        go to state 66
    type       go to state 67
    type_id    go to state 18
    constant   go to state 68


State 129

   31 alloc: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' express ')'
   32      | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 135


State 130

   33 alloc: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . type TOK_GT TOK_GT '(' ')'
   34      | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . type TOK_GT TOK_GT '(' express ')'

    TOK_ARRAY   shift, and go to state 6
    TOK_PTR     shift, and go to state 7
    TOK_VOID    shift, and go to state 8
    TOK_INT     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_STRING  shift, and go to state 11

    type     go to state 136
    type_id  go to state 18


State 131

   29 alloc: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' ')'
   30      | TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' express ')'

    '('  shift, and go to state 137


State 132

   23 while: TOK_WHILE '(' express ')' . select

    TOK_NULLPTR    shift, and go to state 39
    TOK_IF         shift, and go to state 40
    TOK_ELSE       shift, and go to state 41
    TOK_ARRAY      shift, and go to state 6
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_PTR        shift, and go to state 7
    TOK_WHILE      shift, and go to state 44
    TOK_VOID       shift, and go to state 8
    TOK_RETURN     shift, and go to state 45
    TOK_INT        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_STRING     shift, and go to state 11
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    ';'            shift, and go to state 26
    '{'            shift, and go to state 52
    '('            shift, and go to state 54

    vardecl    go to state 55
    callParam  go to state 56
    call       go to state 57
    while      go to state 58
    select     go to state 138
    ifelse     go to state 59
    return     go to state 60
    alloc      go to state 61
    block      go to state 62
    blockBody  go to state 29
    state      go to state 82
    express    go to state 64
    unop       go to state 65
    var        go to state 66
    type       go to state 67
    type_id    go to state 18
    constant   go to state 68


State 133

   70 var: express '[' express ']' .

    $default  reduce using rule 70 (var)


State 134

   25 ifelse: TOK_IF '(' express ')' select .

    $default  reduce using rule 25 (ifelse)


State 135

   31 alloc: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' express ')'
   32      | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 139


State 136

   33 alloc: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type . TOK_GT TOK_GT '(' ')'
   34      | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type . TOK_GT TOK_GT '(' express ')'

    TOK_GT  shift, and go to state 140


State 137

   29 alloc: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . ')'
   30      | TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . express ')'

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54
    ')'            shift, and go to state 141

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 142
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 138

   23 while: TOK_WHILE '(' express ')' select .

    $default  reduce using rule 23 (while)


State 139

   31 alloc: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . express ')'
   32      | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54
    ')'            shift, and go to state 143

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 144
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 140

   33 alloc: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT . TOK_GT '(' ')'
   34      | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT . TOK_GT '(' express ')'

    TOK_GT  shift, and go to state 145


State 141

   29 alloc: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' ')' .

    $default  reduce using rule 29 (alloc)


State 142

   30 alloc: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' express . ')'
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ')'        shift, and go to state 146
    '['        shift, and go to state 109

    binop  go to state 110


State 143

   32 alloc: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 32 (alloc)


State 144

   31 alloc: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' express . ')'
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ')'        shift, and go to state 147
    '['        shift, and go to state 109

    binop  go to state 110


State 145

   33 alloc: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT . '(' ')'
   34      | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT . '(' express ')'

    '('  shift, and go to state 148


State 146

   30 alloc: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' express ')' .

    $default  reduce using rule 30 (alloc)


State 147

   31 alloc: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' express ')' .

    $default  reduce using rule 31 (alloc)


State 148

   33 alloc: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' . ')'
   34      | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' . express ')'

    TOK_NULLPTR    shift, and go to state 39
    TOK_NOT        shift, and go to state 42
    TOK_ALLOC      shift, and go to state 43
    TOK_CHARCON    shift, and go to state 46
    TOK_STRINGCON  shift, and go to state 47
    TOK_INTCON     shift, and go to state 48
    TOK_IDENT      shift, and go to state 49
    '+'            shift, and go to state 50
    '-'            shift, and go to state 51
    '('            shift, and go to state 54
    ')'            shift, and go to state 149

    callParam  go to state 56
    call       go to state 57
    alloc      go to state 61
    express    go to state 150
    unop       go to state 65
    var        go to state 66
    constant   go to state 68


State 149

   33 alloc: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' ')' .

    $default  reduce using rule 33 (alloc)


State 150

   34 alloc: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' express . ')'
   47 express: express . binop express
   70 var: express . '[' express ']'
   71    | express . TOK_ARROW TOK_IDENT

    TOK_GE     shift, and go to state 95
    TOK_LE     shift, and go to state 96
    TOK_EQ     shift, and go to state 97
    TOK_NE     shift, and go to state 98
    TOK_GT     shift, and go to state 99
    TOK_LT     shift, and go to state 100
    TOK_ARROW  shift, and go to state 101
    '='        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107
    ')'        shift, and go to state 151
    '['        shift, and go to state 109

    binop  go to state 110


State 151

   34 alloc: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT type TOK_GT TOK_GT '(' express ')' .

    $default  reduce using rule 34 (alloc)
