Terminals unused in grammar

   ROOT
   IDENT
   TYPE_ID
   FUNCTION
   TOK_PARAM
   TOK_PROTOTYPE
   BLOCK
   TOK_GE
   TOK_LE
   TOK_EQ
   TOK_NE
   TOK_GT
   TOK_LT
   TOK_IF
   TOK_ELSE
   TOK_STRUCT
   TOK_ARRAY
   TOK_NOT
   TOK_ALLOC
   TOK_PTR
   TOK_ARROW
   TOK_WHILE
   TOK_RETURN
   '%'


State 27 conflicts: 9 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program function
    3        | program vardecl
    4        | program error ';'
    5        | program ';'
    6        | %empty

    7 function: identif '(' ')' ';'
    8         | identif param ')' ';'
    9         | identif '(' ')' block
   10         | identif param ')' block

   11 vardecl: type TOK_IDENT ';'
   12        | type TOK_IDENT '=' expr ';'

   13 identif: type TOK_IDENT

   14 param: '(' identif
   15      | '(' identif ',' identif

   16 block: blockBody '}'

   17 blockBody: '{' statement
   18          | blockBody statement
   19          | '{'

   20 statement: expr ';'

   21 type: type_id

   22 type_id: TOK_INT
   23        | TOK_STRING
   24        | TOK_CHAR
   25        | TOK_VOID
   26        | TOK_IDENT

   27 constant: TOK_INTCON
   28         | TOK_STRINGCON
   29         | TOK_CHARCON
   30         | TOK_NULLPTR

   31 expr: expr '=' expr
   32     | expr '+' expr
   33     | expr '-' expr
   34     | expr '*' expr
   35     | expr '/' expr
   36     | expr '^' expr
   37     | '+' expr
   38     | '-' expr
   39     | '(' expr ')'
   40     | TOK_IDENT
   41     | constant
   42     | NUMBER


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'(' (40) 7 9 14 15 39
')' (41) 7 8 9 10 39
'*' (42) 34
'+' (43) 32 37
',' (44) 15
'-' (45) 33 38
'/' (47) 35
';' (59) 4 5 7 8 11 12 20
'=' (61) 12 31
'^' (94) 36
'{' (123) 17 19
'}' (125) 16
error (256) 4
ROOT (258)
IDENT (259)
NUMBER (260) 42
TYPE_ID (261)
FUNCTION (262)
TOK_PARAM (263)
TOK_PROTOTYPE (264)
BLOCK (265)
TOK_NULLPTR (266) 30
TOK_GE (267)
TOK_LE (268)
TOK_EQ (269)
TOK_NE (270)
TOK_GT (271)
TOK_LT (272)
TOK_IF (273)
TOK_ELSE (274)
TOK_STRUCT (275)
TOK_ARRAY (276)
TOK_NOT (277)
TOK_ALLOC (278)
TOK_PTR (279)
TOK_ARROW (280)
TOK_WHILE (281)
TOK_VOID (282) 25
TOK_RETURN (283)
TOK_INT (284) 22
TOK_CHAR (285) 24
TOK_STRING (286) 23
TOK_CHARCON (287) 29
TOK_STRINGCON (288) 28
TOK_INTCON (289) 27
TOK_IDENT (290) 11 12 13 26 40
POS (291)
NEG (292)


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
start (52)
    on left: 1, on right: 0
program (53)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
function (54)
    on left: 7 8 9 10, on right: 2
vardecl (55)
    on left: 11 12, on right: 3
identif (56)
    on left: 13, on right: 7 8 9 10 14 15
param (57)
    on left: 14 15, on right: 8 10
block (58)
    on left: 16, on right: 9 10
blockBody (59)
    on left: 17 18 19, on right: 16 18
statement (60)
    on left: 20, on right: 17 18
type (61)
    on left: 21, on right: 11 12 13
type_id (62)
    on left: 22 23 24 25 26, on right: 21
constant (63)
    on left: 27 28 29 30, on right: 41
expr (64)
    on left: 31 32 33 34 35 36 37 38 39 40 41 42, on right: 12 20 31
    32 33 34 35 36 37 38 39


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . function
    3        | program . vardecl
    4        | program . error ';'
    5        | program . ';'

    error       shift, and go to state 4
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 9
    ';'         shift, and go to state 10

    $end  reduce using rule 1 (start)

    function  go to state 11
    vardecl   go to state 12
    identif   go to state 13
    type      go to state 14
    type_id   go to state 15


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . ';'

    ';'  shift, and go to state 16


State 5

   25 type_id: TOK_VOID .

    $default  reduce using rule 25 (type_id)


State 6

   22 type_id: TOK_INT .

    $default  reduce using rule 22 (type_id)


State 7

   24 type_id: TOK_CHAR .

    $default  reduce using rule 24 (type_id)


State 8

   23 type_id: TOK_STRING .

    $default  reduce using rule 23 (type_id)


State 9

   26 type_id: TOK_IDENT .

    $default  reduce using rule 26 (type_id)


State 10

    5 program: program ';' .

    $default  reduce using rule 5 (program)


State 11

    2 program: program function .

    $default  reduce using rule 2 (program)


State 12

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 13

    7 function: identif . '(' ')' ';'
    8         | identif . param ')' ';'
    9         | identif . '(' ')' block
   10         | identif . param ')' block

    '('  shift, and go to state 17

    param  go to state 18


State 14

   11 vardecl: type . TOK_IDENT ';'
   12        | type . TOK_IDENT '=' expr ';'
   13 identif: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 19


State 15

   21 type: type_id .

    $default  reduce using rule 21 (type)


State 16

    4 program: program error ';' .

    $default  reduce using rule 4 (program)


State 17

    7 function: identif '(' . ')' ';'
    9         | identif '(' . ')' block
   14 param: '(' . identif
   15      | '(' . identif ',' identif

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 9
    ')'         shift, and go to state 20

    identif  go to state 21
    type     go to state 22
    type_id  go to state 15


State 18

    8 function: identif param . ')' ';'
   10         | identif param . ')' block

    ')'  shift, and go to state 23


State 19

   11 vardecl: type TOK_IDENT . ';'
   12        | type TOK_IDENT . '=' expr ';'
   13 identif: type TOK_IDENT .

    '='  shift, and go to state 24
    ';'  shift, and go to state 25

    $default  reduce using rule 13 (identif)


State 20

    7 function: identif '(' ')' . ';'
    9         | identif '(' ')' . block

    ';'  shift, and go to state 26
    '{'  shift, and go to state 27

    block      go to state 28
    blockBody  go to state 29


State 21

   14 param: '(' identif .
   15      | '(' identif . ',' identif

    ','  shift, and go to state 30

    $default  reduce using rule 14 (param)


State 22

   13 identif: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 31


State 23

    8 function: identif param ')' . ';'
   10         | identif param ')' . block

    ';'  shift, and go to state 32
    '{'  shift, and go to state 27

    block      go to state 33
    blockBody  go to state 29


State 24

   12 vardecl: type TOK_IDENT '=' . expr ';'

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 44


State 25

   11 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 11 (vardecl)


State 26

    7 function: identif '(' ')' ';' .

    $default  reduce using rule 7 (function)


State 27

   17 blockBody: '{' . statement
   19          | '{' .

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    NUMBER         [reduce using rule 19 (blockBody)]
    TOK_NULLPTR    [reduce using rule 19 (blockBody)]
    TOK_CHARCON    [reduce using rule 19 (blockBody)]
    TOK_STRINGCON  [reduce using rule 19 (blockBody)]
    TOK_INTCON     [reduce using rule 19 (blockBody)]
    TOK_IDENT      [reduce using rule 19 (blockBody)]
    '+'            [reduce using rule 19 (blockBody)]
    '-'            [reduce using rule 19 (blockBody)]
    '('            [reduce using rule 19 (blockBody)]
    $default       reduce using rule 19 (blockBody)

    statement  go to state 45
    constant   go to state 43
    expr       go to state 46


State 28

    9 function: identif '(' ')' block .

    $default  reduce using rule 9 (function)


State 29

   16 block: blockBody . '}'
   18 blockBody: blockBody . statement

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42
    '}'            shift, and go to state 47

    statement  go to state 48
    constant   go to state 43
    expr       go to state 46


State 30

   15 param: '(' identif ',' . identif

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 9

    identif  go to state 49
    type     go to state 22
    type_id  go to state 15


State 31

   13 identif: type TOK_IDENT .

    $default  reduce using rule 13 (identif)


State 32

    8 function: identif param ')' ';' .

    $default  reduce using rule 8 (function)


State 33

   10 function: identif param ')' block .

    $default  reduce using rule 10 (function)


State 34

   42 expr: NUMBER .

    $default  reduce using rule 42 (expr)


State 35

   30 constant: TOK_NULLPTR .

    $default  reduce using rule 30 (constant)


State 36

   29 constant: TOK_CHARCON .

    $default  reduce using rule 29 (constant)


State 37

   28 constant: TOK_STRINGCON .

    $default  reduce using rule 28 (constant)


State 38

   27 constant: TOK_INTCON .

    $default  reduce using rule 27 (constant)


State 39

   40 expr: TOK_IDENT .

    $default  reduce using rule 40 (expr)


State 40

   37 expr: '+' . expr

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 50


State 41

   38 expr: '-' . expr

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 51


State 42

   39 expr: '(' . expr ')'

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 52


State 43

   41 expr: constant .

    $default  reduce using rule 41 (expr)


State 44

   12 vardecl: type TOK_IDENT '=' expr . ';'
   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr

    '='  shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '*'  shift, and go to state 56
    '/'  shift, and go to state 57
    '^'  shift, and go to state 58
    ';'  shift, and go to state 59


State 45

   17 blockBody: '{' statement .

    $default  reduce using rule 17 (blockBody)


State 46

   20 statement: expr . ';'
   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr

    '='  shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '*'  shift, and go to state 56
    '/'  shift, and go to state 57
    '^'  shift, and go to state 58
    ';'  shift, and go to state 60


State 47

   16 block: blockBody '}' .

    $default  reduce using rule 16 (block)


State 48

   18 blockBody: blockBody statement .

    $default  reduce using rule 18 (blockBody)


State 49

   15 param: '(' identif ',' identif .

    $default  reduce using rule 15 (param)


State 50

   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr
   37     | '+' expr .

    $default  reduce using rule 37 (expr)


State 51

   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr
   38     | '-' expr .

    $default  reduce using rule 38 (expr)


State 52

   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr
   39     | '(' expr . ')'

    '='  shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '*'  shift, and go to state 56
    '/'  shift, and go to state 57
    '^'  shift, and go to state 58
    ')'  shift, and go to state 61


State 53

   31 expr: expr '=' . expr

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 62


State 54

   32 expr: expr '+' . expr

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 63


State 55

   33 expr: expr '-' . expr

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 64


State 56

   34 expr: expr '*' . expr

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 65


State 57

   35 expr: expr '/' . expr

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 66


State 58

   36 expr: expr '^' . expr

    NUMBER         shift, and go to state 34
    TOK_NULLPTR    shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_IDENT      shift, and go to state 39
    '+'            shift, and go to state 40
    '-'            shift, and go to state 41
    '('            shift, and go to state 42

    constant  go to state 43
    expr      go to state 67


State 59

   12 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 12 (vardecl)


State 60

   20 statement: expr ';' .

    $default  reduce using rule 20 (statement)


State 61

   39 expr: '(' expr ')' .

    $default  reduce using rule 39 (expr)


State 62

   31 expr: expr . '=' expr
   31     | expr '=' expr .
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr

    '='  shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '*'  shift, and go to state 56
    '/'  shift, and go to state 57
    '^'  shift, and go to state 58

    $default  reduce using rule 31 (expr)


State 63

   31 expr: expr . '=' expr
   32     | expr . '+' expr
   32     | expr '+' expr .
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57
    '^'  shift, and go to state 58

    $default  reduce using rule 32 (expr)


State 64

   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   33     | expr '-' expr .
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57
    '^'  shift, and go to state 58

    $default  reduce using rule 33 (expr)


State 65

   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   34     | expr '*' expr .
   35     | expr . '/' expr
   36     | expr . '^' expr

    '^'  shift, and go to state 58

    $default  reduce using rule 34 (expr)


State 66

   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   35     | expr '/' expr .
   36     | expr . '^' expr

    '^'  shift, and go to state 58

    $default  reduce using rule 35 (expr)


State 67

   31 expr: expr . '=' expr
   32     | expr . '+' expr
   33     | expr . '-' expr
   34     | expr . '*' expr
   35     | expr . '/' expr
   36     | expr . '^' expr
   36     | expr '^' expr .

    '^'  shift, and go to state 58

    $default  reduce using rule 36 (expr)
