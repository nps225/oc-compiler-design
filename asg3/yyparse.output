Nonterminals useless in grammar

   expr


Terminals unused in grammar

   ROOT
   IDENT
   NUMBER
   TYPE_ID
   FUNCTION
   TOK_PARAM
   TOK_PROTOTYPE
   TOK_GE
   TOK_LE
   TOK_EQ
   TOK_NE
   TOK_GT
   TOK_LT
   TOK_IF
   TOK_ELSE
   TOK_STRUCT
   TOK_ARRAY
   TOK_NOT
   TOK_ALLOC
   TOK_PTR
   TOK_ARROW
   TOK_WHILE
   TOK_RETURN
   TOK_CHARCON
   TOK_STRINGCON
   TOK_INTCON
   '='
   '+'
   '-'
   '*'
   '/'
   '%'
   '^'


Rules useless in grammar

   16 expr: expr '=' expr
   17     | expr '+' expr
   18     | expr '-' expr
   19     | expr '*' expr
   20     | expr '/' expr
   21     | expr '^' expr
   22     | '+' expr
   23     | '-' expr
   24     | '(' expr ')'
   25     | TOK_IDENT
   26     | NUMBER


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program function
    3        | program error ';'
    4        | program ';'
    5        | %empty

    6 function: identif '(' ')' ';'
    7         | identif param ')' ';'

    8 identif: type_id TOK_IDENT

    9 param: '(' identif
   10      | '(' identif ',' identif

   11 type_id: TOK_INT
   12        | TOK_STRING
   13        | TOK_CHAR
   14        | TOK_VOID
   15        | TOK_IDENT


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'(' (40) 6 9 10
')' (41) 6 7
'*' (42)
'+' (43)
',' (44) 10
'-' (45)
'/' (47)
';' (59) 3 4 6 7
'=' (61)
'^' (94)
error (256) 3
ROOT (258)
IDENT (259)
NUMBER (260)
TYPE_ID (261)
FUNCTION (262)
TOK_PARAM (263)
TOK_PROTOTYPE (264)
TOK_GE (265)
TOK_LE (266)
TOK_EQ (267)
TOK_NE (268)
TOK_GT (269)
TOK_LT (270)
TOK_IF (271)
TOK_ELSE (272)
TOK_STRUCT (273)
TOK_ARRAY (274)
TOK_NOT (275)
TOK_ALLOC (276)
TOK_PTR (277)
TOK_ARROW (278)
TOK_WHILE (279)
TOK_VOID (280) 14
TOK_RETURN (281)
TOK_INT (282) 11
TOK_CHAR (283) 13
TOK_STRING (284) 12
TOK_CHARCON (285)
TOK_STRINGCON (286)
TOK_INTCON (287)
TOK_IDENT (288) 8 15
POS (289)
NEG (290)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
start (48)
    on left: 1, on right: 0
program (49)
    on left: 2 3 4 5, on right: 1 2 3 4
function (50)
    on left: 6 7, on right: 2
identif (51)
    on left: 8, on right: 6 7 9 10
param (52)
    on left: 9 10, on right: 7
type_id (53)
    on left: 11 12 13 14 15, on right: 8


State 0

    0 $accept: . start $end

    $default  reduce using rule 5 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . function
    3        | program . error ';'
    4        | program . ';'

    error       shift, and go to state 4
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 9
    ';'         shift, and go to state 10

    $end  reduce using rule 1 (start)

    function  go to state 11
    identif   go to state 12
    type_id   go to state 13


State 3

    0 $accept: start $end .

    $default  accept


State 4

    3 program: program error . ';'

    ';'  shift, and go to state 14


State 5

   14 type_id: TOK_VOID .

    $default  reduce using rule 14 (type_id)


State 6

   11 type_id: TOK_INT .

    $default  reduce using rule 11 (type_id)


State 7

   13 type_id: TOK_CHAR .

    $default  reduce using rule 13 (type_id)


State 8

   12 type_id: TOK_STRING .

    $default  reduce using rule 12 (type_id)


State 9

   15 type_id: TOK_IDENT .

    $default  reduce using rule 15 (type_id)


State 10

    4 program: program ';' .

    $default  reduce using rule 4 (program)


State 11

    2 program: program function .

    $default  reduce using rule 2 (program)


State 12

    6 function: identif . '(' ')' ';'
    7         | identif . param ')' ';'

    '('  shift, and go to state 15

    param  go to state 16


State 13

    8 identif: type_id . TOK_IDENT

    TOK_IDENT  shift, and go to state 17


State 14

    3 program: program error ';' .

    $default  reduce using rule 3 (program)


State 15

    6 function: identif '(' . ')' ';'
    9 param: '(' . identif
   10      | '(' . identif ',' identif

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 9
    ')'         shift, and go to state 18

    identif  go to state 19
    type_id  go to state 13


State 16

    7 function: identif param . ')' ';'

    ')'  shift, and go to state 20


State 17

    8 identif: type_id TOK_IDENT .

    $default  reduce using rule 8 (identif)


State 18

    6 function: identif '(' ')' . ';'

    ';'  shift, and go to state 21


State 19

    9 param: '(' identif .
   10      | '(' identif . ',' identif

    ','  shift, and go to state 22

    $default  reduce using rule 9 (param)


State 20

    7 function: identif param ')' . ';'

    ';'  shift, and go to state 23


State 21

    6 function: identif '(' ')' ';' .

    $default  reduce using rule 6 (function)


State 22

   10 param: '(' identif ',' . identif

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 9

    identif  go to state 24
    type_id  go to state 13


State 23

    7 function: identif param ')' ';' .

    $default  reduce using rule 7 (function)


State 24

   10 param: '(' identif ',' identif .

    $default  reduce using rule 10 (param)
