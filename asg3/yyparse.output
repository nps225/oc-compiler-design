Nonterminals useless in grammar

   function
   identif
   param
   block
   blockBody
   statement
   unop


Terminals unused in grammar

   ROOT
   IDENT
   TYPE_ID
   FUNCTION
   TOK_PARAM
   TOK_PROTOTYPE
   BLOCK
   TOK_IF
   TOK_ELSE
   TOK_STRUCT
   TOK_ARRAY
   TOK_NOT
   TOK_ALLOC
   TOK_PTR
   TOK_ARROW
   TOK_WHILE
   TOK_RETURN
   ','
   '}'
   '{'


Rules useless in grammar

   49 function: identif '(' ')' ';'
   50         | identif param ')' ';'
   51         | identif '(' ')' block
   52         | identif param ')' block

   53 identif: type TOK_IDENT

   54 param: '(' identif
   55      | '(' identif ',' identif

   56 block: blockBody '}'

   57 blockBody: '{' statement
   58          | blockBody statement
   59          | '{'

   60 statement: expr ';'

   61 unop: '+' express
   62     | '-' express


State 42 conflicts: 12 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program state
    3        | program vardecl
    4        | program error ';'
    5        | program ';'
    6        | %empty

    7 vardecl: type TOK_IDENT ';'
    8        | type TOK_IDENT '=' expr ';'

    9 state: express ';'

   10 express: express binop express
   11        | '(' express ')'
   12        | var
   13        | constant

   14 binop: '='
   15      | TOK_EQ
   16      | TOK_NE
   17      | TOK_GT
   18      | TOK_GE
   19      | TOK_LT
   20      | TOK_LE
   21      | '+'
   22      | '-'
   23      | '*'
   24      | '/'
   25      | '%'

   26 var: TOK_IDENT

   27 type: type_id

   28 type_id: TOK_INT
   29        | TOK_STRING
   30        | TOK_CHAR
   31        | TOK_VOID
   32        | TOK_IDENT

   33 constant: TOK_INTCON
   34         | TOK_STRINGCON
   35         | TOK_CHARCON
   36         | TOK_NULLPTR

   37 expr: expr '=' expr
   38     | expr '+' expr
   39     | expr '-' expr
   40     | expr '*' expr
   41     | expr '/' expr
   42     | expr '^' expr
   43     | '+' expr
   44     | '-' expr
   45     | '(' expr ')'
   46     | TOK_IDENT
   47     | constant
   48     | NUMBER


Terminals, with rules where they appear

$end (0) 0
'%' (37) 25
'(' (40) 11 45
')' (41) 11 45
'*' (42) 23 40
'+' (43) 21 38 43
',' (44)
'-' (45) 22 39 44
'/' (47) 24 41
';' (59) 4 5 7 8 9
'=' (61) 8 14 37
'^' (94) 42
'{' (123)
'}' (125)
error (256) 4
ROOT (258)
IDENT (259)
NUMBER (260) 48
TYPE_ID (261)
FUNCTION (262)
TOK_PARAM (263)
TOK_PROTOTYPE (264)
BLOCK (265)
TOK_NULLPTR (266) 36
TOK_GE (267) 18
TOK_LE (268) 20
TOK_EQ (269) 15
TOK_NE (270) 16
TOK_GT (271) 17
TOK_LT (272) 19
TOK_IF (273)
TOK_ELSE (274)
TOK_STRUCT (275)
TOK_ARRAY (276)
TOK_NOT (277)
TOK_ALLOC (278)
TOK_PTR (279)
TOK_ARROW (280)
TOK_WHILE (281)
TOK_VOID (282) 31
TOK_RETURN (283)
TOK_INT (284) 28
TOK_CHAR (285) 30
TOK_STRING (286) 29
TOK_CHARCON (287) 35
TOK_STRINGCON (288) 34
TOK_INTCON (289) 33
TOK_IDENT (290) 7 8 26 32 46
POS (291)
NEG (292)


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
start (52)
    on left: 1, on right: 0
program (53)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
vardecl (54)
    on left: 7 8, on right: 3
state (55)
    on left: 9, on right: 2
express (56)
    on left: 10 11 12 13, on right: 9 10 11
binop (57)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25, on right: 10
var (58)
    on left: 26, on right: 12
type (59)
    on left: 27, on right: 7 8
type_id (60)
    on left: 28 29 30 31 32, on right: 27
constant (61)
    on left: 33 34 35 36, on right: 13 47
expr (62)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48, on right: 8 37 38
    39 40 41 42 43 44 45


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . state
    3        | program . vardecl
    4        | program . error ';'
    5        | program . ';'

    error          shift, and go to state 4
    TOK_NULLPTR    shift, and go to state 5
    TOK_VOID       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 13
    ';'            shift, and go to state 14
    '('            shift, and go to state 15

    $end  reduce using rule 1 (start)

    vardecl   go to state 16
    state     go to state 17
    express   go to state 18
    var       go to state 19
    type      go to state 20
    type_id   go to state 21
    constant  go to state 22


State 3

    0 $accept: start $end .

    $default  accept


State 4

    4 program: program error . ';'

    ';'  shift, and go to state 23


State 5

   36 constant: TOK_NULLPTR .

    $default  reduce using rule 36 (constant)


State 6

   31 type_id: TOK_VOID .

    $default  reduce using rule 31 (type_id)


State 7

   28 type_id: TOK_INT .

    $default  reduce using rule 28 (type_id)


State 8

   30 type_id: TOK_CHAR .

    $default  reduce using rule 30 (type_id)


State 9

   29 type_id: TOK_STRING .

    $default  reduce using rule 29 (type_id)


State 10

   35 constant: TOK_CHARCON .

    $default  reduce using rule 35 (constant)


State 11

   34 constant: TOK_STRINGCON .

    $default  reduce using rule 34 (constant)


State 12

   33 constant: TOK_INTCON .

    $default  reduce using rule 33 (constant)


State 13

   26 var: TOK_IDENT .
   32 type_id: TOK_IDENT .

    TOK_IDENT  reduce using rule 32 (type_id)
    $default   reduce using rule 26 (var)


State 14

    5 program: program ';' .

    $default  reduce using rule 5 (program)


State 15

   11 express: '(' . express ')'

    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 24
    '('            shift, and go to state 15

    express   go to state 25
    var       go to state 19
    constant  go to state 22


State 16

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 17

    2 program: program state .

    $default  reduce using rule 2 (program)


State 18

    9 state: express . ';'
   10 express: express . binop express

    TOK_GE  shift, and go to state 26
    TOK_LE  shift, and go to state 27
    TOK_EQ  shift, and go to state 28
    TOK_NE  shift, and go to state 29
    TOK_GT  shift, and go to state 30
    TOK_LT  shift, and go to state 31
    '='     shift, and go to state 32
    '+'     shift, and go to state 33
    '-'     shift, and go to state 34
    '*'     shift, and go to state 35
    '/'     shift, and go to state 36
    '%'     shift, and go to state 37
    ';'     shift, and go to state 38

    binop  go to state 39


State 19

   12 express: var .

    $default  reduce using rule 12 (express)


State 20

    7 vardecl: type . TOK_IDENT ';'
    8        | type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 40


State 21

   27 type: type_id .

    $default  reduce using rule 27 (type)


State 22

   13 express: constant .

    $default  reduce using rule 13 (express)


State 23

    4 program: program error ';' .

    $default  reduce using rule 4 (program)


State 24

   26 var: TOK_IDENT .

    $default  reduce using rule 26 (var)


State 25

   10 express: express . binop express
   11        | '(' express . ')'

    TOK_GE  shift, and go to state 26
    TOK_LE  shift, and go to state 27
    TOK_EQ  shift, and go to state 28
    TOK_NE  shift, and go to state 29
    TOK_GT  shift, and go to state 30
    TOK_LT  shift, and go to state 31
    '='     shift, and go to state 32
    '+'     shift, and go to state 33
    '-'     shift, and go to state 34
    '*'     shift, and go to state 35
    '/'     shift, and go to state 36
    '%'     shift, and go to state 37
    ')'     shift, and go to state 41

    binop  go to state 39


State 26

   18 binop: TOK_GE .

    $default  reduce using rule 18 (binop)


State 27

   20 binop: TOK_LE .

    $default  reduce using rule 20 (binop)


State 28

   15 binop: TOK_EQ .

    $default  reduce using rule 15 (binop)


State 29

   16 binop: TOK_NE .

    $default  reduce using rule 16 (binop)


State 30

   17 binop: TOK_GT .

    $default  reduce using rule 17 (binop)


State 31

   19 binop: TOK_LT .

    $default  reduce using rule 19 (binop)


State 32

   14 binop: '=' .

    $default  reduce using rule 14 (binop)


State 33

   21 binop: '+' .

    $default  reduce using rule 21 (binop)


State 34

   22 binop: '-' .

    $default  reduce using rule 22 (binop)


State 35

   23 binop: '*' .

    $default  reduce using rule 23 (binop)


State 36

   24 binop: '/' .

    $default  reduce using rule 24 (binop)


State 37

   25 binop: '%' .

    $default  reduce using rule 25 (binop)


State 38

    9 state: express ';' .

    $default  reduce using rule 9 (state)


State 39

   10 express: express binop . express

    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 24
    '('            shift, and go to state 15

    express   go to state 42
    var       go to state 19
    constant  go to state 22


State 40

    7 vardecl: type TOK_IDENT . ';'
    8        | type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 43
    ';'  shift, and go to state 44


State 41

   11 express: '(' express ')' .

    $default  reduce using rule 11 (express)


State 42

   10 express: express . binop express
   10        | express binop express .

    TOK_GE  shift, and go to state 26
    TOK_LE  shift, and go to state 27
    TOK_EQ  shift, and go to state 28
    TOK_NE  shift, and go to state 29
    TOK_GT  shift, and go to state 30
    TOK_LT  shift, and go to state 31
    '='     shift, and go to state 32
    '+'     shift, and go to state 33
    '-'     shift, and go to state 34
    '*'     shift, and go to state 35
    '/'     shift, and go to state 36
    '%'     shift, and go to state 37

    TOK_GE    [reduce using rule 10 (express)]
    TOK_LE    [reduce using rule 10 (express)]
    TOK_EQ    [reduce using rule 10 (express)]
    TOK_NE    [reduce using rule 10 (express)]
    TOK_GT    [reduce using rule 10 (express)]
    TOK_LT    [reduce using rule 10 (express)]
    '='       [reduce using rule 10 (express)]
    '+'       [reduce using rule 10 (express)]
    '-'       [reduce using rule 10 (express)]
    '*'       [reduce using rule 10 (express)]
    '/'       [reduce using rule 10 (express)]
    '%'       [reduce using rule 10 (express)]
    $default  reduce using rule 10 (express)

    binop  go to state 39


State 43

    8 vardecl: type TOK_IDENT '=' . expr ';'

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 51


State 44

    7 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 7 (vardecl)


State 45

   48 expr: NUMBER .

    $default  reduce using rule 48 (expr)


State 46

   46 expr: TOK_IDENT .

    $default  reduce using rule 46 (expr)


State 47

   43 expr: '+' . expr

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 52


State 48

   44 expr: '-' . expr

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 53


State 49

   45 expr: '(' . expr ')'

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 54


State 50

   47 expr: constant .

    $default  reduce using rule 47 (expr)


State 51

    8 vardecl: type TOK_IDENT '=' expr . ';'
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr

    '='  shift, and go to state 55
    '+'  shift, and go to state 56
    '-'  shift, and go to state 57
    '*'  shift, and go to state 58
    '/'  shift, and go to state 59
    '^'  shift, and go to state 60
    ';'  shift, and go to state 61


State 52

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | '+' expr .

    $default  reduce using rule 43 (expr)


State 53

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   44     | '-' expr .

    $default  reduce using rule 44 (expr)


State 54

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   45     | '(' expr . ')'

    '='  shift, and go to state 55
    '+'  shift, and go to state 56
    '-'  shift, and go to state 57
    '*'  shift, and go to state 58
    '/'  shift, and go to state 59
    '^'  shift, and go to state 60
    ')'  shift, and go to state 62


State 55

   37 expr: expr '=' . expr

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 63


State 56

   38 expr: expr '+' . expr

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 64


State 57

   39 expr: expr '-' . expr

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 65


State 58

   40 expr: expr '*' . expr

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 66


State 59

   41 expr: expr '/' . expr

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 67


State 60

   42 expr: expr '^' . expr

    NUMBER         shift, and go to state 45
    TOK_NULLPTR    shift, and go to state 5
    TOK_CHARCON    shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_IDENT      shift, and go to state 46
    '+'            shift, and go to state 47
    '-'            shift, and go to state 48
    '('            shift, and go to state 49

    constant  go to state 50
    expr      go to state 68


State 61

    8 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 8 (vardecl)


State 62

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


State 63

   37 expr: expr . '=' expr
   37     | expr '=' expr .
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr

    '='  shift, and go to state 55
    '+'  shift, and go to state 56
    '-'  shift, and go to state 57
    '*'  shift, and go to state 58
    '/'  shift, and go to state 59
    '^'  shift, and go to state 60

    $default  reduce using rule 37 (expr)


State 64

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   38     | expr '+' expr .
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr

    '*'  shift, and go to state 58
    '/'  shift, and go to state 59
    '^'  shift, and go to state 60

    $default  reduce using rule 38 (expr)


State 65

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   39     | expr '-' expr .
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr

    '*'  shift, and go to state 58
    '/'  shift, and go to state 59
    '^'  shift, and go to state 60

    $default  reduce using rule 39 (expr)


State 66

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   40     | expr '*' expr .
   41     | expr . '/' expr
   42     | expr . '^' expr

    '^'  shift, and go to state 60

    $default  reduce using rule 40 (expr)


State 67

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   41     | expr '/' expr .
   42     | expr . '^' expr

    '^'  shift, and go to state 60

    $default  reduce using rule 41 (expr)


State 68

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   42     | expr '^' expr .

    '^'  shift, and go to state 60

    $default  reduce using rule 42 (expr)
