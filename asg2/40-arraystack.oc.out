; 0.  1: # 1 "40-arraystack.oc"; 0.  0: 
; 0.  1: # 1 "<built-in>"
; 1.  1: # 1 "<command-line>"
; 2.  1: # 1 "40-arraystack.oc"
; 3.  1: 
; 3.  2: 
; 3.  3: # 1 "oclib.h" 1
; 4.  1: # 22 "oclib.h"
; 5. 22: void fail (string expr, string file, int line);
; 5. 23: 
; 5. 24: void putchr (int chr);
; 5. 25: void putint (int num);
; 5. 26: void putstr (string str);
; 5. 27: 
; 5. 28: int getchr();
; 5. 29: string getstr();
; 5. 30: string getln();
; 5. 31: # 4 "40-arraystack.oc" 2
; 6.  4: 
; 6.  5: 
; 6.  6: 
; 6.  7: struct stack {
; 6.  8:    array<string> data;
; 6.  9:    int size;
; 6. 10:    int top;
; 6. 11: };
; 6. 12: 
; 6. 13: ptr<struct stack> new_stack (int size) {
; 6. 14:    ptr<struct stack> stack = alloc<struct stack>();
; 6. 15:    stack->data = alloc<array<string>> (size);
; 6. 16:    stack->size = size;
; 6. 17:    stack->top = (-1);
; 6. 18:    return stack;
; 6. 19: }
; 6. 20: 
; 6. 21: void push (ptr<struct stack> stack, string str) {
; 6. 22:    {if (not (stack->top < stack->size - 1)) fail ("stack->top < stack->size - 1", "40-arraystack.oc", 22);};
; 6. 23:    stack->top = stack->top + 1;
; 6. 24:    stack->data[stack->top] = str;
; 6. 25: }
; 6. 26: 
; 6. 27: string pop (ptr<struct stack> stack) {
; 6. 28:    string tmp = stack->data[stack->top];
; 6. 29:    {if (not (stack->top != (-1))) fail ("stack->top != EMPTY", "40-arraystack.oc", 29);};
; 6. 30:    stack->top = stack->top - 1;
; 6. 31:    return tmp;
; 6. 32: }
; 6. 33: 
; 6. 34: int empty (ptr<struct stack> stack) {
; 6. 35:    return stack->top == (-1);
; 6. 36: }
; 6. 37: 
; 6. 38: int main (int argc, array<string> argv) {
; 6. 39:    ptr<struct stack> stack = new_stack (100);
; 6. 40:    int argi = 0;
; 6. 41:    while (argi < argc) {
; 6. 42:       push (stack, argv[argi]);
; 6. 43:       argi = argi + 1;
; 6. 44:    }
; 6. 45:    while (not empty (stack)) {
; 6. 46:       putstr (pop (stack));
; 6. 47:       putchr ('\n');
; 6. 48:    }
; 6. 49:    return 0;
; 6. 50: }
